<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COOLIFY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COOLIFY.md" />
              <option name="updatedContent" value="# Coolify Configuration for ERP System&#10;# This file contains deployment instructions for Coolify&#10;&#10;# Project Structure:&#10;# - Frontend (Next.js): apps/web&#10;# - Backend (NestJS): apps/server  &#10;# - Database (Prisma): packages/db&#10;&#10;# Deployment Strategy:&#10;# Deploy as two separate services in Coolify:&#10;# 1. Backend API Service&#10;# 2. Frontend Web Service&#10;&#10;# Service 1: Backend API&#10;# - Build Context: Root directory&#10;# - Dockerfile: apps/server/Dockerfile&#10;# - Port: 3001&#10;# - Health Check: /health or /api/health&#10;&#10;# Service 2: Frontend Web&#10;# - Build Context: Root directory  &#10;# - Dockerfile: apps/web/Dockerfile&#10;# - Port: 3000&#10;# - Depends on: Backend API service&#10;&#10;# Environment Variables Required:&#10;# See .env.coolify file for complete list" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/serverless-function.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/serverless-function.ts" />
              <option name="updatedContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from '../src/app.module';&#10;import { ValidationPipe } from '@nestjs/common';&#10;import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';&#10;&#10;let app: any;&#10;&#10;async function createApp() {&#10;  if (!app) {&#10;    app = await NestFactory.create(AppModule, {&#10;      logger: ['error', 'warn'],&#10;    });&#10;&#10;    app.useGlobalPipes(&#10;      new ValidationPipe({&#10;        whitelist: true,&#10;        forbidNonWhitelisted: true,&#10;        transform: true,&#10;      }),&#10;    );&#10;&#10;    app.enableCors({&#10;      origin: process.env.NEXT_PUBLIC_APP_URL || '*',&#10;      credentials: true,&#10;    });&#10;&#10;    // Setup Swagger only in development&#10;    if (process.env.NODE_ENV !== 'production') {&#10;      const config = new DocumentBuilder()&#10;        .setTitle('ERP API')&#10;        .setDescription('ERP System API Documentation')&#10;        .setVersion('1.0')&#10;        .addBearerAuth()&#10;        .build();&#10;      const document = SwaggerModule.createDocument(app, config);&#10;      SwaggerModule.setup('api/docs', app, document);&#10;    }&#10;&#10;    await app.init();&#10;  }&#10;  return app;&#10;}&#10;&#10;export default async function handler(req: any, res: any) {&#10;  const app = await createApp();&#10;  const expressApp = app.getHttpAdapter().getInstance();&#10;  &#10;  // Remove the /api/server prefix from the URL for NestJS routing&#10;  req.url = req.url.replace(/^\/api\/server/, '') || '/';&#10;  &#10;  return expressApp(req, res);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/server/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/server/Dockerfile" />
              <option name="originalContent" value="# Use Node.js LTS version&#10;FROM node:20-alpine AS base&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy root package configuration files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./&#10;&#10;# Copy package.json files for dependency installation (only existing packages)&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/server/package.json ./apps/server/package.json&#10;&#10;# Install dependencies&#10;RUN pnpm install --frozen-lockfile&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Generate Prisma client&#10;RUN pnpm --filter=@repo/db db:generate&#10;&#10;# Build the server&#10;RUN pnpm --filter=server build&#10;&#10;# Production stage&#10;FROM node:20-alpine AS production&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy workspace configuration files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./&#10;&#10;# Copy ALL package.json files needed for workspace resolution&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/server/package.json ./apps/server/package.json&#10;&#10;# Install production dependencies&#10;RUN pnpm install --prod --frozen-lockfile&#10;&#10;# Copy built application and Prisma client&#10;COPY --from=base /app/apps/server/dist ./apps/server/dist&#10;COPY --from=base /app/packages/db ./packages/db&#10;COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma&#10;&#10;# Set working directory to server&#10;WORKDIR /app/apps/server&#10;&#10;# Expose port&#10;EXPOSE 3001&#10;&#10;# Start the application&#10;CMD [&quot;node&quot;, &quot;dist/main.js&quot;]&#10;" />
              <option name="updatedContent" value="# Use Node.js LTS version&#10;FROM node:20-alpine AS base&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy workspace files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./&#10;&#10;# Copy all package.json files first for better caching&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/server/package.json ./apps/server/package.json&#10;&#10;# Install all dependencies&#10;RUN pnpm install --frozen-lockfile&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Generate Prisma client&#10;RUN pnpm --filter=@repo/db db:generate&#10;&#10;# Build the server&#10;RUN pnpm --filter=server build&#10;&#10;# Production stage - simplified approach&#10;FROM node:20-alpine AS production&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy everything from build stage first&#10;COPY --from=base /app ./&#10;&#10;# Remove non-production files to reduce size&#10;RUN rm -rf apps/web apps/server/src packages/*/src&#10;&#10;# Install only production dependencies&#10;RUN pnpm install --prod --frozen-lockfile&#10;&#10;# Set working directory to server&#10;WORKDIR /app/apps/server&#10;&#10;# Expose port&#10;EXPOSE 3001&#10;&#10;# Start the application&#10;CMD [&quot;node&quot;, &quot;dist/main.js&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/Dockerfile" />
              <option name="originalContent" value="# Use Node.js LTS version&#10;FROM node:20-alpine AS base&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy root package configuration files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./&#10;&#10;# Copy package.json files for dependency installation (only existing packages)&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/web/package.json ./apps/web/package.json&#10;&#10;# Install dependencies&#10;RUN pnpm install --frozen-lockfile&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Generate Prisma client&#10;RUN pnpm --filter=@repo/db db:generate&#10;&#10;# Build the web application&#10;RUN pnpm --filter=web build&#10;&#10;# Production stage&#10;FROM node:20-alpine AS production&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy workspace configuration files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./&#10;&#10;# Copy ALL package.json files needed for workspace resolution&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/web/package.json ./apps/web/package.json&#10;&#10;# Install production dependencies&#10;RUN pnpm install --prod --frozen-lockfile&#10;&#10;# Copy built application and necessary files from build stage&#10;COPY --from=base /app/apps/web/.next ./apps/web/.next&#10;COPY --from=base /app/apps/web/public ./apps/web/public&#10;COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma&#10;COPY --from=base /app/packages/db/prisma ./packages/db/prisma&#10;&#10;# Set the working directory to the web app&#10;WORKDIR /app/apps/web&#10;&#10;# Expose port&#10;EXPOSE 3000&#10;&#10;# Start the application&#10;CMD [&quot;pnpm&quot;, &quot;start&quot;]&#10;" />
              <option name="updatedContent" value="# Use Node.js LTS version&#10;FROM node:20-alpine AS base&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy workspace files&#10;COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./&#10;&#10;# Copy all package.json files first for better caching&#10;COPY packages/db/package.json ./packages/db/package.json&#10;COPY packages/eslint-config/package.json ./packages/eslint-config/package.json&#10;COPY packages/types/package.json ./packages/types/package.json&#10;COPY packages/typescript-config/package.json ./packages/typescript-config/package.json&#10;COPY packages/ui/package.json ./packages/ui/package.json&#10;COPY apps/web/package.json ./apps/web/package.json&#10;&#10;# Install all dependencies&#10;RUN pnpm install --frozen-lockfile&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Generate Prisma client&#10;RUN pnpm --filter=@repo/db db:generate&#10;&#10;# Build the web application&#10;RUN pnpm --filter=web build&#10;&#10;# Production stage - simplified approach&#10;FROM node:20-alpine AS production&#10;RUN apk add --no-cache libc6-compat&#10;WORKDIR /app&#10;&#10;# Install pnpm&#10;RUN npm install -g pnpm&#10;&#10;# Copy everything from build stage first&#10;COPY --from=base /app ./&#10;&#10;# Remove non-production files to reduce size&#10;RUN rm -rf apps/server apps/web/src packages/*/src&#10;&#10;# Install only production dependencies&#10;RUN pnpm install --prod --frozen-lockfile&#10;&#10;# Set working directory to web app&#10;WORKDIR /app/apps/web&#10;&#10;# Expose port&#10;EXPOSE 3000&#10;&#10;# Start the application&#10;CMD [&quot;pnpm&quot;, &quot;start&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/config/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/config/index.ts" />
              <option name="originalContent" value="export const envConfig = {&#10;  appUrl: process.env.NEXT_PUBLIC_APP_URL || &quot;http://localhost:3000&quot;,&#10;  apiUrl: process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:3001&quot;,&#10;  nextAuthSecret: process.env.NEXTAUTH_SECRET || &quot;my-secret&quot;,&#10;  nextAuthUrl: process.env.NEXTAUTH_URL || &quot;http://localhost:3000&quot;,&#10;};&#10;" />
              <option name="updatedContent" value="export const envConfig = {&#10;  appUrl: process.env.NEXT_PUBLIC_APP_URL || &quot;http://localhost:3000&quot;,&#10;  apiUrl:&#10;    process.env.NODE_ENV === &quot;production&quot;&#10;      ? `${process.env.NEXT_PUBLIC_APP_URL}/api/server`&#10;      : process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:3001&quot;,&#10;  nextAuthSecret: process.env.NEXTAUTH_SECRET || &quot;my-secret&quot;,&#10;  nextAuthUrl: process.env.NEXTAUTH_URL || &quot;http://localhost:3000&quot;,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;web&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;pnpm --filter=@repo/db db:generate &amp;&amp; next build&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;next lint&quot;,&#10;    &quot;lint:fix&quot;: &quot;next lint --fix&quot;,&#10;    &quot;typecheck&quot;: &quot;tsc --noEmit&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;format:check&quot;: &quot;prettier --check \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@dnd-kit/core&quot;: &quot;^6.3.1&quot;,&#10;    &quot;@dnd-kit/modifiers&quot;: &quot;^9.0.0&quot;,&#10;    &quot;@dnd-kit/sortable&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@dnd-kit/utilities&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@google/genai&quot;: &quot;^0.10.0&quot;,&#10;    &quot;@google/generative-ai&quot;: &quot;^0.24.0&quot;,&#10;    &quot;@hookform/resolvers&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.72.0&quot;,&#10;    &quot;@tanstack/react-table&quot;: &quot;^8.21.3&quot;,&#10;    &quot;@workspace/ui&quot;: &quot;workspace:*&quot;,&#10;    &quot;@workspace/types&quot;: &quot;workspace:*&quot;,&#10;    &quot;axios&quot;: &quot;^1.8.4&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;date-fns&quot;: &quot;^4.1.0&quot;,&#10;    &quot;docx&quot;: &quot;^9.4.1&quot;,&#10;    &quot;file-saver&quot;: &quot;^2.0.5&quot;,&#10;    &quot;framer-motion&quot;: &quot;^12.23.6&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.475.0&quot;,&#10;    &quot;next&quot;: &quot;^15.2.3&quot;,&#10;    &quot;next-auth&quot;: &quot;^4.24.11&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.4&quot;,&#10;    &quot;react&quot;: &quot;^19.0.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.0.0&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;sonner&quot;: &quot;^2.0.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^3.0.1&quot;,&#10;    &quot;yup&quot;: &quot;^1.6.1&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@tanstack/eslint-plugin-query&quot;: &quot;^5.72.0&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;@workspace/eslint-config&quot;: &quot;workspace:^&quot;,&#10;    &quot;@workspace/typescript-config&quot;: &quot;workspace:*&quot;,&#10;    &quot;typescript&quot;: &quot;^5.7.3&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;web&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;next build&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;next lint&quot;,&#10;    &quot;lint:fix&quot;: &quot;next lint --fix&quot;,&#10;    &quot;typecheck&quot;: &quot;tsc --noEmit&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,&#10;    &quot;format:check&quot;: &quot;prettier --check \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@dnd-kit/core&quot;: &quot;^6.3.1&quot;,&#10;    &quot;@dnd-kit/modifiers&quot;: &quot;^9.0.0&quot;,&#10;    &quot;@dnd-kit/sortable&quot;: &quot;^10.0.0&quot;,&#10;    &quot;@dnd-kit/utilities&quot;: &quot;^3.2.2&quot;,&#10;    &quot;@google/genai&quot;: &quot;^0.10.0&quot;,&#10;    &quot;@google/generative-ai&quot;: &quot;^0.24.0&quot;,&#10;    &quot;@hookform/resolvers&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.72.0&quot;,&#10;    &quot;@tanstack/react-table&quot;: &quot;^8.21.3&quot;,&#10;    &quot;@workspace/ui&quot;: &quot;workspace:*&quot;,&#10;    &quot;@workspace/types&quot;: &quot;workspace:*&quot;,&#10;    &quot;axios&quot;: &quot;^1.8.4&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;date-fns&quot;: &quot;^4.1.0&quot;,&#10;    &quot;docx&quot;: &quot;^9.4.1&quot;,&#10;    &quot;file-saver&quot;: &quot;^2.0.5&quot;,&#10;    &quot;framer-motion&quot;: &quot;^12.23.6&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.475.0&quot;,&#10;    &quot;next&quot;: &quot;^15.2.3&quot;,&#10;    &quot;next-auth&quot;: &quot;^4.24.11&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.4&quot;,&#10;    &quot;react&quot;: &quot;^19.0.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.0.0&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;sonner&quot;: &quot;^2.0.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^3.0.1&quot;,&#10;    &quot;yup&quot;: &quot;^1.6.1&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@tanstack/eslint-plugin-query&quot;: &quot;^5.72.0&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;@workspace/eslint-config&quot;: &quot;workspace:^&quot;,&#10;    &quot;@workspace/typescript-config&quot;: &quot;workspace:*&quot;,&#10;    &quot;typescript&quot;: &quot;^5.7.3&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  web:&#10;    build:&#10;      context: .&#10;      dockerfile: apps/web/Dockerfile&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    environment:&#10;      - NODE_ENV=production&#10;      - NEXT_PUBLIC_APP_URL=http://localhost:3000&#10;      - NEXT_PUBLIC_API_URL=http://localhost:3001&#10;      - NEXTAUTH_URL=http://localhost:3000&#10;      - NEXTAUTH_SECRET=your-nextauth-secret&#10;      - DATABASE_URL=${DATABASE_URL}&#10;      - DIRECT_URL=${DIRECT_URL}&#10;    depends_on:&#10;      - server&#10;    networks:&#10;      - app-network&#10;&#10;  server:&#10;    build:&#10;      context: .&#10;      dockerfile: apps/server/Dockerfile&#10;    ports:&#10;      - &quot;3001:3001&quot;&#10;    environment:&#10;      - NODE_ENV=production&#10;      - PORT=3001&#10;      - DATABASE_URL=${DATABASE_URL}&#10;      - DIRECT_URL=${DIRECT_URL}&#10;      - JWT_SECRET=${JWT_SECRET}&#10;      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}&#10;      - SMTP_HOST=${SMTP_HOST}&#10;      - SMTP_PORT=${SMTP_PORT}&#10;      - SMTP_USER=${SMTP_USER}&#10;      - SMTP_PASSWORD=${SMTP_PASSWORD}&#10;      - MAIL_FROM=${MAIL_FROM}&#10;      - SMTP_FROM_NAME=${SMTP_FROM_NAME}&#10;    networks:&#10;      - app-network&#10;&#10;networks:&#10;  app-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;shadcn-ui-monorepo&quot;,&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;build&quot;: &quot;turbo build&quot;,&#10;    &quot;check-types&quot;: &quot;turbo check-types&quot;,&#10;    &quot;dev&quot;: &quot;turbo dev&quot;,&#10;    &quot;lint&quot;: &quot;turbo lint&quot;,&#10;    &quot;format&quot;: &quot;prettier --write \&quot;**/*.{ts,tsx,md}\&quot;&quot;,&#10;    &quot;format:check&quot;: &quot;prettier --check \&quot;**/*.{ts,tsx,md}\&quot;&quot;,&#10;    &quot;prepare&quot;: &quot;husky&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@workspace/eslint-config&quot;: &quot;workspace:*&quot;,&#10;    &quot;@workspace/typescript-config&quot;: &quot;workspace:*&quot;,&#10;    &quot;husky&quot;: &quot;^9.1.7&quot;,&#10;    &quot;prettier&quot;: &quot;^3.5.1&quot;,&#10;    &quot;turbo&quot;: &quot;^2.5.0&quot;,&#10;    &quot;typescript&quot;: &quot;5.7.3&quot;&#10;  },&#10;  &quot;packageManager&quot;: &quot;pnpm@10.4.1&quot;,&#10;  &quot;engines&quot;: {&#10;    &quot;node&quot;: &quot;&gt;=20&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;name&quot;: &quot;shadcn-ui-monorepo&quot;,&#13;&#10;  &quot;version&quot;: &quot;0.0.1&quot;,&#13;&#10;  &quot;private&quot;: true,&#13;&#10;  &quot;scripts&quot;: {&#13;&#10;    &quot;build&quot;: &quot;turbo build&quot;,&#13;&#10;    &quot;check-types&quot;: &quot;turbo check-types&quot;,&#13;&#10;    &quot;dev&quot;: &quot;turbo dev&quot;,&#13;&#10;    &quot;lint&quot;: &quot;turbo lint&quot;,&#13;&#10;    &quot;format&quot;: &quot;prettier --write \&quot;**/*.{ts,tsx,md}\&quot;&quot;,&#13;&#10;    &quot;format:check&quot;: &quot;prettier --check \&quot;**/*.{ts,tsx,md}\&quot;&quot;,&#13;&#10;    &quot;prepare&quot;: &quot;husky&quot;,&#13;&#10;    &quot;db:generate&quot;: &quot;turbo db:generate&quot;,&#13;&#10;    &quot;db:deploy&quot;: &quot;turbo db:deploy&quot;,&#13;&#10;    &quot;build:deploy&quot;: &quot;pnpm db:generate &amp;&amp; pnpm db:deploy &amp;&amp; turbo build&quot;&#13;&#10;  },&#13;&#10;  &quot;devDependencies&quot;: {&#13;&#10;    &quot;@workspace/eslint-config&quot;: &quot;workspace:*&quot;,&#13;&#10;    &quot;@workspace/typescript-config&quot;: &quot;workspace:*&quot;,&#13;&#10;    &quot;husky&quot;: &quot;^9.1.7&quot;,&#13;&#10;    &quot;prettier&quot;: &quot;^3.5.1&quot;,&#13;&#10;    &quot;turbo&quot;: &quot;^2.5.0&quot;,&#13;&#10;    &quot;typescript&quot;: &quot;5.7.3&quot;&#13;&#10;  },&#13;&#10;  &quot;packageManager&quot;: &quot;pnpm@10.4.1&quot;,&#13;&#10;  &quot;engines&quot;: {&#13;&#10;    &quot;node&quot;: &quot;&gt;=20&quot;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/turbo.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/turbo.json" />
              <option name="originalContent" value="{&#10;  &quot;$schema&quot;: &quot;https://turbo.build/schema.json&quot;,&#10;  &quot;ui&quot;: &quot;tui&quot;,&#10;  &quot;globalEnv&quot;: [&#10;    &quot;NODE_ENV&quot;,&#10;    &quot;NEXTAUTH_SECRET&quot;,&#10;    &quot;NEXTAUTH_URL&quot;,&#10;    &quot;NEXT_PUBLIC_APP_URL&quot;,&#10;    &quot;NEXT_PUBLIC_API_URL&quot;,&#10;    &quot;GOOGLE_CLIENT_ID&quot;,&#10;    &quot;GOOGLE_CLIENT_SECRET&quot;,&#10;    &quot;DATABASE_URL&quot;,&#10;    &quot;DIRECT_URL&quot;,&#10;    &quot;PORT&quot;,&#10;    &quot;JWT_SECRET&quot;,&#10;    &quot;JWT_EXPIRES_IN&quot;,&#10;    &quot;SMTP_HOST&quot;,&#10;    &quot;SMTP_PORT&quot;,&#10;    &quot;SMTP_USER&quot;,&#10;    &quot;SMTP_PASSWORD&quot;,&#10;    &quot;MAIL_FROM&quot;,&#10;    &quot;SMTP_FROM_NAME&quot;&#10;  ],&#10;  &quot;tasks&quot;: {&#10;    &quot;build&quot;: {&#10;      &quot;dependsOn&quot;: [&quot;^build&quot;, &quot;^db:generate&quot;],&#10;      &quot;inputs&quot;: [&quot;$TURBO_DEFAULT$&quot;, &quot;.env*&quot;],&#10;      &quot;outputs&quot;: [&quot;.next/**&quot;, &quot;!.next/cache/**&quot;]&#10;    },&#10;    &quot;lint&quot;: {&#10;      &quot;dependsOn&quot;: [&quot;^lint&quot;]&#10;    },&#10;    &quot;check-types&quot;: {&#10;      &quot;dependsOn&quot;: [&quot;^check-types&quot;]&#10;    },&#10;    &quot;dev&quot;: {&#10;      &quot;cache&quot;: false,&#10;      &quot;dependsOn&quot;: [&quot;^db:generate&quot;],&#10;      &quot;persistent&quot;: true&#10;    },&#10;    &quot;db:generate&quot;: {&#10;      &quot;cache&quot;: false&#10;    },&#10;    &quot;db:migrate&quot;: {&#10;      &quot;cache&quot;: false,&#10;      &quot;persistent&quot;: true&#10;    },&#10;    &quot;db:deploy&quot;: {&#10;      &quot;cache&quot;: false&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;$schema&quot;: &quot;https://turbo.build/schema.json&quot;,&#13;&#10;  &quot;ui&quot;: &quot;tui&quot;,&#13;&#10;  &quot;globalEnv&quot;: [&#13;&#10;    &quot;NODE_ENV&quot;,&#13;&#10;    &quot;NEXTAUTH_SECRET&quot;,&#13;&#10;    &quot;NEXTAUTH_URL&quot;,&#13;&#10;    &quot;NEXT_PUBLIC_APP_URL&quot;,&#13;&#10;    &quot;NEXT_PUBLIC_API_URL&quot;,&#13;&#10;    &quot;GOOGLE_CLIENT_ID&quot;,&#13;&#10;    &quot;GOOGLE_CLIENT_SECRET&quot;,&#13;&#10;    &quot;DATABASE_URL&quot;,&#13;&#10;    &quot;DIRECT_URL&quot;,&#13;&#10;    &quot;PORT&quot;,&#13;&#10;    &quot;JWT_SECRET&quot;,&#13;&#10;    &quot;JWT_EXPIRES_IN&quot;,&#13;&#10;    &quot;SMTP_HOST&quot;,&#13;&#10;    &quot;SMTP_PORT&quot;,&#13;&#10;    &quot;SMTP_USER&quot;,&#13;&#10;    &quot;SMTP_PASSWORD&quot;,&#13;&#10;    &quot;MAIL_FROM&quot;,&#13;&#10;    &quot;SMTP_FROM_NAME&quot;&#13;&#10;  ],&#13;&#10;  &quot;tasks&quot;: {&#13;&#10;    &quot;db:generate&quot;: {&#13;&#10;      &quot;cache&quot;: false,&#13;&#10;      &quot;inputs&quot;: [&quot;packages/db/prisma/schema.prisma&quot;],&#13;&#10;      &quot;outputs&quot;: [&quot;packages/db/prisma/client/**&quot;, &quot;node_modules/.prisma/**&quot;]&#13;&#10;    },&#13;&#10;    &quot;db:migrate&quot;: {&#13;&#10;      &quot;cache&quot;: false&#13;&#10;    },&#13;&#10;    &quot;db:deploy&quot;: {&#13;&#10;      &quot;cache&quot;: false&#13;&#10;    },&#13;&#10;    &quot;build&quot;: {&#13;&#10;      &quot;dependsOn&quot;: [&quot;^build&quot;, &quot;db:generate&quot;],&#13;&#10;      &quot;inputs&quot;: [&quot;$TURBO_DEFAULT$&quot;, &quot;.env*&quot;],&#13;&#10;      &quot;outputs&quot;: [&quot;.next/**&quot;, &quot;!.next/cache/**&quot;, &quot;dist/**&quot;]&#13;&#10;    },&#13;&#10;    &quot;lint&quot;: {&#13;&#10;      &quot;dependsOn&quot;: [&quot;^lint&quot;]&#13;&#10;    },&#13;&#10;    &quot;check-types&quot;: {&#13;&#10;      &quot;dependsOn&quot;: [&quot;^check-types&quot;, &quot;db:generate&quot;]&#13;&#10;    },&#13;&#10;    &quot;dev&quot;: {&#13;&#10;      &quot;cache&quot;: false,&#13;&#10;      &quot;dependsOn&quot;: [&quot;db:generate&quot;],&#13;&#10;      &quot;persistent&quot;: true&#13;&#10;    }&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;buildCommand&quot;: &quot;cd apps/web &amp;&amp; pnpm build&quot;,&#10;  &quot;installCommand&quot;: &quot;pnpm install&quot;,&#10;  &quot;outputDirectory&quot;: &quot;.next&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;buildCommand&quot;: &quot;pnpm --filter=@repo/db db:generate &amp;&amp; pnpm --filter=web build &amp;&amp; pnpm --filter=server build&quot;,&#10;  &quot;installCommand&quot;: &quot;pnpm install&quot;,&#10;  &quot;outputDirectory&quot;: &quot;apps/web/.next&quot;,&#10;  &quot;functions&quot;: {&#10;    &quot;api/serverless-function.ts&quot;: {&#10;      &quot;runtime&quot;: &quot;nodejs18.x&quot;,&#10;      &quot;memory&quot;: 1024,&#10;      &quot;maxDuration&quot;: 30&#10;    }&#10;  },&#10;  &quot;rewrites&quot;: [&#10;    {&#10;      &quot;source&quot;: &quot;/api/server/(.*)&quot;,&#10;      &quot;destination&quot;: &quot;/api/serverless-function&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>